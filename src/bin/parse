#!/usr/bin/env php
<?php

use shmurakami\ApiDocGenerator\ApiDocGenerator;
use shmurakami\ApiDocGenerator\Formatters\FormatterInterface;
use shmurakami\ApiDocGenerator\Formatters\JsonFormatter;
use shmurakami\ApiDocGenerator\Formatters\YamlFormatter;
use shmurakami\ApiDocGenerator\Outputs\FileOutput;
use shmurakami\ApiDocGenerator\Outputs\StandardOutput;

require_once __DIR__ . '/../../vendor/autoload.php';

// option
$arguments = getopt('i:f:o:h::', ['input:', 'format:', 'output:', 'help::' ]);

if (isset($arguments['h']) || isset($arguments['help'])) {
    showUsage();
    exit(0);
}

$inputOption = null;
if (isset($arguments['i'])) {
    $inputOption = $arguments['i'];
} else if ($arguments['input']) {
    $inputOption = $arguments['input'];
}

$input = getInputPath($inputOption);
if (!$inputOption) {
    showUsage();
    exit(1);
}

$formatOption = null;
if (isset($arguments['f'])) {
    $formatOption = $arguments['f'];
} else if (isset($arguments['format'])) {
    $formatOption = $arguments['format'];
}

$outputOption = null;
if (isset($arguments['o'])) {
    $outputOption = $arguments['o'];
} else if (isset($arguments['output'])) {
    $outputOption = $arguments['output'];
}

$generator = new ApiDocGenerator();
$generator->setFormat(getFormatter($formatOption))
    ->setOutput(getOutput($outputOption))
    ->generate($input['request'], $input['response']);

function getInputPath($inputOption)
{
    if (!$inputOption) {
        showError('input is empty');
        return null;
    }

    if (!is_file($inputOption)) {
        showError('input path file does not exist');
        return null;
    }

    return json_decode(file_get_contents($inputOption));
}

function getFormatter($format)
{
    if ($format === FormatterInterface::TYPE_JSON) {
        return new JsonFormatter();
    }
    return new YamlFormatter();
}

function getOutput($output)
{
    if ($output) {
        return new FileOutput($output);
    }
    return new StandardOutput();
}

function showUsage()
{
    $usage = <<<EOF

Usage: php parse.php

-i Input file path to parse.
-f Output format. pass yaml or json. otherwise ignored.
-o File path to output. If not passed output to STDOUT
-h Show this message

EOF;
    echo $usage . PHP_EOL;
}

function showError($error)
{
    fwrite(STDERR, $error . PHP_EOL);
}

